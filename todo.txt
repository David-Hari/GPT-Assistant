

* Store window position and other settings using Qt settings

* Import threads from ChatGPT.
  Can get threads with https://chat.openai.com/backend-api/conversations?offset=0&limit=100&order=updated
  and messages with https://chat.openai.com/backend-api/conversation/{threadId}
  Message contents are sent as the original markdown that the model generated.
  Need to handle messages to plugins, e.g. dcedc3d0-9a7a-4a66-8623-754fb419da6a "Handling WM_COMMAND in WinAPI"

* Create "Thread namer" assistant that operates in the background to update the name of a thread.
  Will run after first AI response then again after 10 responses and again after 100 (or something like that).
  It can probably be ran with the same thread ids that the main assistant uses, but only while main assistant is not running.
  If user renames it, use metadata on thread to flag it so that it won't be renamed. If user clears name then update it again.
  Use a cheaper model like gpt3.5
  Maybe provide previous title to it, so it can determine if it needs to change.
  Maybe set to json mode to force it to respond with just the title.

* Drop-down for AI model list, initially populated from config but full list fetched when clicked.
  Filter to only models that can be used with assistants API.

* See if I can limit the context window for each thread. Lower it to maybe a few thousand to save cost.

* Some possible functions:
   - readFile
   - writeFile
   - updateFile   # For a file that is given to the AI for use with the retrieval tool. Updating would write back to the API.

* Allow AI to store data in its own database - "knowledge.db"
  Look into Graph RAG.

* Collapsable panel to the right that shows all files uploaded. Can add by dropping files. Can remove and update existing
  files. Maybe also watch for file change and automatically upload.

* Info button that when pressed shows a tool-tip with number of tokens used and cost.
  (Doesn't seem to be currently possible to get that information from the API)




* Maybe use QListView(QAbstractItemView)::setIndexWidget and give it a widget that contains text panes.
  Render markdown to Qt text pane. For code, insert a separate text pane using the following:
  https://doc.qt.io/qtforpython-6.5/examples/example_widgets_richtext_syntaxhighlighter.html